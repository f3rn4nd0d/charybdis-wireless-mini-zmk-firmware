#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// Layer aliases test

#define BASE 0
#define NUM 1
#define NAV 2
#define SYM 3
#define PHOTOS 4
#define EXTRAS 5
#define MOUSE 6
#define SCROLL 7
#define SLOW 8

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        Third_Layer {
            if-layers =<NUM NAV>;
            then-layer = <SYM>;
        };
    };

    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        tdtb: td_mouse_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&httl 8 6>, <&to 0>;

            tapping-term-ms = <200>;
        };

        tdtb2: td_slow_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&httl 8 0>, <&to 8>;
        };

        httl: ht_two_layers {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 5>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
            layers = <0>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0>;
        };

        BASE_or_EXTRAS {
            bindings = <&td_bore>;
            key-positions = <38 39>;
        };
    };

    macros {
        VSplit: VSplit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp SEMI &kp LS(V) &kp LS(S) &kp LS(P) &kp RET>;
        };

        HSplit: HSplit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp SEMI &kp LS(S) &kp LS(P) &kp RET>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB              &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O    &kp P          &kp BACKSPACE
&kp LCTRL            &kp A  &kp S  &kp D             &kp F  &kp G        &kp H      &kp J  &kp K      &kp L    &kp SEMICOLON  &kp SQT
&mt LEFT_SHIFT STAR  &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH       &mt RSHIFT LPAR
                                   &kp LEFT_COMMAND  &mo 1  &kp SPACE    &kp ENTER  &mo 2
            >;
        };

        NUM {
            bindings = <
&kp ESCAPE            &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4   &kp NUMBER_5    &kp NUMBER_6   &kp N7              &kp N8              &kp N9            &kp N0         &kp BACKSPACE
&trans                &none         &none         &tdtb         &kp BACKSPACE  &kp HOME        &kp PAGE_UP    &kp LEFT_ARROW      &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT      &trans
&mt LEFT_SHIFT GRAVE  &none         &none         &none         &none          &kp END         &kp PAGE_DOWN  &kp LA(LEFT_ARROW)  &kp LA(DOWN_ARROW)  &kp LA(UP_ARROW)  &kp LA(RIGHT)  &mt RIGHT_SHIFT TILDE
                                                  &trans        &trans         &trans          &kp ENTER      &kp RIGHT_ALT
            >;
        };

        NAV {
            bindings = <
&kp GRAVE     &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp RS(N6)     &kp LS(N7)        &kp LS(N8)         &kp LS(NUMBER_9)  &kp LS(N0)  &kp BACKSPACE
&trans        &trans    &trans  &trans    &trans      &trans         &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH     &kp GRAVE   &trans
&kp RA(APOS)  &none     &none   &none     &none       &none          &kp LS(EQUAL)  &kp LS(MINUS)     &kp RIGHT_BRACE    &kp PIPE          &none       &kp RA(NON_US_HASH)
                                &trans    &trans      &trans         &trans         &trans
            >;
        };

        SYM {
            bindings = <
&none                &none         &none         &kp RA(NUMBER_5)  &none         &none           &none   &none            &ext_power EP_ON   &ext_power EP_OFF  &none  &none
&bt BT_CLR           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4    &none   &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &none              &none  &none
&mt LSHIFT RA(LBKT)  &none         &none         &none             &none         &none           &none   &none            &none              &none              &none  &mt LSHIFT RA(RBKT)
                                                 &trans            &trans        &trans          &trans  &trans
            >;
        };

        PHOTOS {
            bindings = <
&trans          &kp LA(LC(LS(Z)))  &kp LA(LC(LS(E)))  &kp LA(LC(LS(A)))  &kp LA(LC(LS(S)))  &kp LA(LC(LS(B)))    &none   &none   &none  &none  &none  &trans
&kp LC(LA(E))   &kp LEFT           &kp DOWN           &kp UP             &kp RIGHT          &kp LCTRL            &none   &none   &none  &none  &none  &none
&kp LS(DELETE)  &kp LA(LS(A))      &kp LA(KP_N1)      &kp LA(KP_N2)      &kp LA(KP_N3)      &none                &none   &none   &none  &none  &none  &to 0
                                                      &trans             &none              &trans               &trans  &trans
            >;
        };

        EXTRAS {
            bindings = <
&kp C_SLEEP  &none  &none  &none  &none  &kp C_BRIGHTNESS_MAXIMUM    &bt BT_SEL 0     &bt BT_SEL 1       &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_CLR  &kp C_AL_COFFEE
&kp C_POWER  &none  &none  &none  &none  &kp C_BRIGHTNESS_INC        &out OUT_TOG     &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_STOP    &kp C_NEXT  &none
&bootloader  &none  &none  &none  &none  &kp C_BRIGHTNESS_DEC        &kp PRINTSCREEN  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp K_MUTE    &none       &bootloader
                           &none  &none  &none                       &none            &none
            >;
        };

        MOUSE {
            bindings = <
&none    &msc MOVE_LEFT  &msc MOVE_UP    &mmv MOVE_UP    &msc MOVE_DOWN   &msc MOVE_RIGHT    &none       &none            &none      &none         &none          &none
&kp TAB  &mkp MB4        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5           &none       &kp RIGHT_SHIFT  &kp RCTRL  &kp LEFT_ALT  &kp LEFT_META  &none
&none    &kp C_AC_UNDO   &kp C_AC_CUT    &kp C_AC_COPY   &kp C_AC_PASTE   &mkp MCLK          &none       &none            &none      &none         &none          &none
                                         &trans          &mkp LCLK        &mkp RCLK          &kp RETURN  &lt 3 SPACE
            >;
        };

        SCROLL {
            bindings = <
&none    &msc MOVE_LEFT  &msc MOVE_UP    &mmv MOVE_UP    &msc MOVE_DOWN   &msc MOVE_RIGHT    &none       &none            &none      &none         &none          &none
&kp TAB  &mkp MB4        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5           &none       &kp RIGHT_SHIFT  &kp RCTRL  &kp LEFT_ALT  &kp LEFT_META  &none
&none    &kp C_AC_UNDO   &kp C_AC_CUT    &kp C_AC_COPY   &kp C_AC_PASTE   &mkp MCLK          &none       &none            &none      &none         &none          &none
                                         &trans          &mkp LCLK        &mkp RCLK          &kp RETURN  &lt 3 SPACE
            >;
        };

        SLOW {
            bindings = <
&none   &msc MOVE_LEFT  &msc MOVE_UP    &mmv MOVE_UP    &msc MOVE_DOWN   &msc MOVE_RIGHT    &none       &none        &none   &none   &none   &none
&trans  &mkp MB4        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5           &none       &trans       &trans  &trans  &trans  &none
&none   &kp C_AC_UNDO   &kp C_AC_CUT    &kp C_AC_COPY   &kp C_AC_PASTE   &mkp MCLK          &none       &none        &none   &none   &none   &none
                                        &trans          &mkp LCLK        &mkp RCLK          &kp RETURN  &lt 3 SPACE
            >;
        };
    };
};
